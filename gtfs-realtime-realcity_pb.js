/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gtfs$realtime_pb = require('./gtfs-realtime_pb.js');
goog.exportSymbol('proto.realcity.Alert', null, global);
goog.exportSymbol('proto.realcity.RouteDetail', null, global);
goog.exportSymbol('proto.realcity.RouteDetail.EffectType', null, global);
goog.exportSymbol('proto.realcity.StopTimeUpdate', null, global);
goog.exportSymbol('proto.realcity.VehicleDescriptor', null, global);
goog.exportSymbol('proto.realcity.alert', null, global);
goog.exportSymbol('proto.realcity.stopTimeUpdate', null, global);
goog.exportSymbol('proto.realcity.vehicle', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realcity.VehicleDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realcity.VehicleDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.realcity.VehicleDescriptor.displayName = 'proto.realcity.VehicleDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realcity.VehicleDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.realcity.VehicleDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realcity.VehicleDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.VehicleDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicleModel: jspb.Message.getField(msg, 1),
    deviated: jspb.Message.getFieldWithDefault(msg, 2, false),
    vehicleType: jspb.Message.getField(msg, 3),
    doorOpen: jspb.Message.getField(msg, 4),
    stopDistance: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realcity.VehicleDescriptor}
 */
proto.realcity.VehicleDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realcity.VehicleDescriptor;
  return proto.realcity.VehicleDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realcity.VehicleDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realcity.VehicleDescriptor}
 */
proto.realcity.VehicleDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicleModel(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeviated(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVehicleType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoorOpen(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStopDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realcity.VehicleDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realcity.VehicleDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realcity.VehicleDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.VehicleDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string vehicle_model = 1;
 * @return {string}
 */
proto.realcity.VehicleDescriptor.prototype.getVehicleModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.realcity.VehicleDescriptor.prototype.setVehicleModel = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.realcity.VehicleDescriptor.prototype.clearVehicleModel = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.VehicleDescriptor.prototype.hasVehicleModel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool deviated = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.realcity.VehicleDescriptor.prototype.getDeviated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.realcity.VehicleDescriptor.prototype.setDeviated = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.realcity.VehicleDescriptor.prototype.clearDeviated = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.VehicleDescriptor.prototype.hasDeviated = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 vehicle_type = 3;
 * @return {number}
 */
proto.realcity.VehicleDescriptor.prototype.getVehicleType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.realcity.VehicleDescriptor.prototype.setVehicleType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.realcity.VehicleDescriptor.prototype.clearVehicleType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.VehicleDescriptor.prototype.hasVehicleType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool door_open = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.realcity.VehicleDescriptor.prototype.getDoorOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.realcity.VehicleDescriptor.prototype.setDoorOpen = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.realcity.VehicleDescriptor.prototype.clearDoorOpen = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.VehicleDescriptor.prototype.hasDoorOpen = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 stop_distance = 5;
 * @return {number}
 */
proto.realcity.VehicleDescriptor.prototype.getStopDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.realcity.VehicleDescriptor.prototype.setStopDistance = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.realcity.VehicleDescriptor.prototype.clearStopDistance = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.VehicleDescriptor.prototype.hasStopDistance = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realcity.StopTimeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realcity.StopTimeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.realcity.StopTimeUpdate.displayName = 'proto.realcity.StopTimeUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realcity.StopTimeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.realcity.StopTimeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realcity.StopTimeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.StopTimeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduledArrival: (f = msg.getScheduledArrival()) && gtfs$realtime_pb.TripUpdate.StopTimeEvent.toObject(includeInstance, f),
    scheduledDeparture: (f = msg.getScheduledDeparture()) && gtfs$realtime_pb.TripUpdate.StopTimeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realcity.StopTimeUpdate}
 */
proto.realcity.StopTimeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realcity.StopTimeUpdate;
  return proto.realcity.StopTimeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realcity.StopTimeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realcity.StopTimeUpdate}
 */
proto.realcity.StopTimeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new gtfs$realtime_pb.TripUpdate.StopTimeEvent;
      reader.readMessage(value,gtfs$realtime_pb.TripUpdate.StopTimeEvent.deserializeBinaryFromReader);
      msg.setScheduledArrival(value);
      break;
    case 2:
      var value = new gtfs$realtime_pb.TripUpdate.StopTimeEvent;
      reader.readMessage(value,gtfs$realtime_pb.TripUpdate.StopTimeEvent.deserializeBinaryFromReader);
      msg.setScheduledDeparture(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realcity.StopTimeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realcity.StopTimeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realcity.StopTimeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.StopTimeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduledArrival();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      gtfs$realtime_pb.TripUpdate.StopTimeEvent.serializeBinaryToWriter
    );
  }
  f = message.getScheduledDeparture();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gtfs$realtime_pb.TripUpdate.StopTimeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional transit_realtime.TripUpdate.StopTimeEvent scheduled_arrival = 1;
 * @return {?proto.transit_realtime.TripUpdate.StopTimeEvent}
 */
proto.realcity.StopTimeUpdate.prototype.getScheduledArrival = function() {
  return /** @type{?proto.transit_realtime.TripUpdate.StopTimeEvent} */ (
    jspb.Message.getWrapperField(this, gtfs$realtime_pb.TripUpdate.StopTimeEvent, 1));
};


/** @param {?proto.transit_realtime.TripUpdate.StopTimeEvent|undefined} value */
proto.realcity.StopTimeUpdate.prototype.setScheduledArrival = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.realcity.StopTimeUpdate.prototype.clearScheduledArrival = function() {
  this.setScheduledArrival(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.StopTimeUpdate.prototype.hasScheduledArrival = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional transit_realtime.TripUpdate.StopTimeEvent scheduled_departure = 2;
 * @return {?proto.transit_realtime.TripUpdate.StopTimeEvent}
 */
proto.realcity.StopTimeUpdate.prototype.getScheduledDeparture = function() {
  return /** @type{?proto.transit_realtime.TripUpdate.StopTimeEvent} */ (
    jspb.Message.getWrapperField(this, gtfs$realtime_pb.TripUpdate.StopTimeEvent, 2));
};


/** @param {?proto.transit_realtime.TripUpdate.StopTimeEvent|undefined} value */
proto.realcity.StopTimeUpdate.prototype.setScheduledDeparture = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.realcity.StopTimeUpdate.prototype.clearScheduledDeparture = function() {
  this.setScheduledDeparture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.StopTimeUpdate.prototype.hasScheduledDeparture = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realcity.RouteDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.realcity.RouteDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.realcity.RouteDetail.displayName = 'proto.realcity.RouteDetail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realcity.RouteDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.realcity.RouteDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realcity.RouteDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.RouteDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    routeId: jspb.Message.getField(msg, 1),
    headerText: (f = msg.getHeaderText()) && gtfs$realtime_pb.TranslatedString.toObject(includeInstance, f),
    cause: jspb.Message.getField(msg, 3),
    effect: jspb.Message.getField(msg, 4),
    effectType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realcity.RouteDetail}
 */
proto.realcity.RouteDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realcity.RouteDetail;
  return proto.realcity.RouteDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realcity.RouteDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realcity.RouteDetail}
 */
proto.realcity.RouteDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteId(value);
      break;
    case 2:
      var value = new gtfs$realtime_pb.TranslatedString;
      reader.readMessage(value,gtfs$realtime_pb.TranslatedString.deserializeBinaryFromReader);
      msg.setHeaderText(value);
      break;
    case 3:
      var value = /** @type {!proto.transit_realtime.Alert.Cause} */ (reader.readEnum());
      msg.setCause(value);
      break;
    case 4:
      var value = /** @type {!proto.transit_realtime.Alert.Effect} */ (reader.readEnum());
      msg.setEffect(value);
      break;
    case 5:
      var value = /** @type {!proto.realcity.RouteDetail.EffectType} */ (reader.readEnum());
      msg.setEffectType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realcity.RouteDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realcity.RouteDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realcity.RouteDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.RouteDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeaderText();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gtfs$realtime_pb.TranslatedString.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.transit_realtime.Alert.Cause} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.transit_realtime.Alert.Effect} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.realcity.RouteDetail.EffectType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.realcity.RouteDetail.EffectType = {
  NO_SERVICE: 1,
  WARNING: 2
};

/**
 * required string route_id = 1;
 * @return {string}
 */
proto.realcity.RouteDetail.prototype.getRouteId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.realcity.RouteDetail.prototype.setRouteId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.realcity.RouteDetail.prototype.clearRouteId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.RouteDetail.prototype.hasRouteId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional transit_realtime.TranslatedString header_text = 2;
 * @return {?proto.transit_realtime.TranslatedString}
 */
proto.realcity.RouteDetail.prototype.getHeaderText = function() {
  return /** @type{?proto.transit_realtime.TranslatedString} */ (
    jspb.Message.getWrapperField(this, gtfs$realtime_pb.TranslatedString, 2));
};


/** @param {?proto.transit_realtime.TranslatedString|undefined} value */
proto.realcity.RouteDetail.prototype.setHeaderText = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.realcity.RouteDetail.prototype.clearHeaderText = function() {
  this.setHeaderText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.RouteDetail.prototype.hasHeaderText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional transit_realtime.Alert.Cause cause = 3;
 * @return {!proto.transit_realtime.Alert.Cause}
 */
proto.realcity.RouteDetail.prototype.getCause = function() {
  return /** @type {!proto.transit_realtime.Alert.Cause} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.transit_realtime.Alert.Cause} value */
proto.realcity.RouteDetail.prototype.setCause = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.realcity.RouteDetail.prototype.clearCause = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.RouteDetail.prototype.hasCause = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional transit_realtime.Alert.Effect effect = 4;
 * @return {!proto.transit_realtime.Alert.Effect}
 */
proto.realcity.RouteDetail.prototype.getEffect = function() {
  return /** @type {!proto.transit_realtime.Alert.Effect} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.transit_realtime.Alert.Effect} value */
proto.realcity.RouteDetail.prototype.setEffect = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.realcity.RouteDetail.prototype.clearEffect = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.RouteDetail.prototype.hasEffect = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EffectType effect_type = 5;
 * @return {!proto.realcity.RouteDetail.EffectType}
 */
proto.realcity.RouteDetail.prototype.getEffectType = function() {
  return /** @type {!proto.realcity.RouteDetail.EffectType} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {!proto.realcity.RouteDetail.EffectType} value */
proto.realcity.RouteDetail.prototype.setEffectType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.realcity.RouteDetail.prototype.clearEffectType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.RouteDetail.prototype.hasEffectType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.realcity.Alert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.realcity.Alert.repeatedFields_, null);
};
goog.inherits(proto.realcity.Alert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.realcity.Alert.displayName = 'proto.realcity.Alert';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.realcity.Alert.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.realcity.Alert.prototype.toObject = function(opt_includeInstance) {
  return proto.realcity.Alert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.realcity.Alert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.Alert.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttext: (f = msg.getStarttext()) && gtfs$realtime_pb.TranslatedString.toObject(includeInstance, f),
    endtext: (f = msg.getEndtext()) && gtfs$realtime_pb.TranslatedString.toObject(includeInstance, f),
    modifiedtime: jspb.Message.getField(msg, 3),
    routeList: jspb.Message.toObjectList(msg.getRouteList(),
    proto.realcity.RouteDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.realcity.Alert}
 */
proto.realcity.Alert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.realcity.Alert;
  return proto.realcity.Alert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.realcity.Alert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.realcity.Alert}
 */
proto.realcity.Alert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new gtfs$realtime_pb.TranslatedString;
      reader.readMessage(value,gtfs$realtime_pb.TranslatedString.deserializeBinaryFromReader);
      msg.setStarttext(value);
      break;
    case 2:
      var value = new gtfs$realtime_pb.TranslatedString;
      reader.readMessage(value,gtfs$realtime_pb.TranslatedString.deserializeBinaryFromReader);
      msg.setEndtext(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setModifiedtime(value);
      break;
    case 4:
      var value = new proto.realcity.RouteDetail;
      reader.readMessage(value,proto.realcity.RouteDetail.deserializeBinaryFromReader);
      msg.addRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.realcity.Alert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.realcity.Alert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.realcity.Alert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.realcity.Alert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      gtfs$realtime_pb.TranslatedString.serializeBinaryToWriter
    );
  }
  f = message.getEndtext();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gtfs$realtime_pb.TranslatedString.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRouteList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.realcity.RouteDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional transit_realtime.TranslatedString startText = 1;
 * @return {?proto.transit_realtime.TranslatedString}
 */
proto.realcity.Alert.prototype.getStarttext = function() {
  return /** @type{?proto.transit_realtime.TranslatedString} */ (
    jspb.Message.getWrapperField(this, gtfs$realtime_pb.TranslatedString, 1));
};


/** @param {?proto.transit_realtime.TranslatedString|undefined} value */
proto.realcity.Alert.prototype.setStarttext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.realcity.Alert.prototype.clearStarttext = function() {
  this.setStarttext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.Alert.prototype.hasStarttext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional transit_realtime.TranslatedString endText = 2;
 * @return {?proto.transit_realtime.TranslatedString}
 */
proto.realcity.Alert.prototype.getEndtext = function() {
  return /** @type{?proto.transit_realtime.TranslatedString} */ (
    jspb.Message.getWrapperField(this, gtfs$realtime_pb.TranslatedString, 2));
};


/** @param {?proto.transit_realtime.TranslatedString|undefined} value */
proto.realcity.Alert.prototype.setEndtext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.realcity.Alert.prototype.clearEndtext = function() {
  this.setEndtext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.Alert.prototype.hasEndtext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 modifiedTime = 3;
 * @return {number}
 */
proto.realcity.Alert.prototype.getModifiedtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.realcity.Alert.prototype.setModifiedtime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.realcity.Alert.prototype.clearModifiedtime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.realcity.Alert.prototype.hasModifiedtime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated RouteDetail route = 4;
 * @return {!Array<!proto.realcity.RouteDetail>}
 */
proto.realcity.Alert.prototype.getRouteList = function() {
  return /** @type{!Array<!proto.realcity.RouteDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.realcity.RouteDetail, 4));
};


/** @param {!Array<!proto.realcity.RouteDetail>} value */
proto.realcity.Alert.prototype.setRouteList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.realcity.RouteDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.realcity.RouteDetail}
 */
proto.realcity.Alert.prototype.addRoute = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.realcity.RouteDetail, opt_index);
};


proto.realcity.Alert.prototype.clearRouteList = function() {
  this.setRouteList([]);
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `vehicle`.
 * @type {!jspb.ExtensionFieldInfo<!proto.realcity.VehicleDescriptor>}
 */
proto.realcity.vehicle = new jspb.ExtensionFieldInfo(
    1006,
    {vehicle: 0},
    proto.realcity.VehicleDescriptor,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.realcity.VehicleDescriptor.toObject),
    0);

gtfs$realtime_pb.VehicleDescriptor.extensionsBinary[1006] = new jspb.ExtensionFieldBinaryInfo(
    proto.realcity.vehicle,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.realcity.VehicleDescriptor.serializeBinaryToWriter,
    proto.realcity.VehicleDescriptor.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
gtfs$realtime_pb.VehicleDescriptor.extensions[1006] = proto.realcity.vehicle;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `stopTimeUpdate`.
 * @type {!jspb.ExtensionFieldInfo<!proto.realcity.StopTimeUpdate>}
 */
proto.realcity.stopTimeUpdate = new jspb.ExtensionFieldInfo(
    1006,
    {stopTimeUpdate: 0},
    proto.realcity.StopTimeUpdate,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.realcity.StopTimeUpdate.toObject),
    0);

gtfs$realtime_pb.TripUpdate.StopTimeUpdate.extensionsBinary[1006] = new jspb.ExtensionFieldBinaryInfo(
    proto.realcity.stopTimeUpdate,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.realcity.StopTimeUpdate.serializeBinaryToWriter,
    proto.realcity.StopTimeUpdate.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
gtfs$realtime_pb.TripUpdate.StopTimeUpdate.extensions[1006] = proto.realcity.stopTimeUpdate;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `alert`.
 * @type {!jspb.ExtensionFieldInfo<!proto.realcity.Alert>}
 */
proto.realcity.alert = new jspb.ExtensionFieldInfo(
    1006,
    {alert: 0},
    proto.realcity.Alert,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.realcity.Alert.toObject),
    0);

gtfs$realtime_pb.Alert.extensionsBinary[1006] = new jspb.ExtensionFieldBinaryInfo(
    proto.realcity.alert,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.realcity.Alert.serializeBinaryToWriter,
    proto.realcity.Alert.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
gtfs$realtime_pb.Alert.extensions[1006] = proto.realcity.alert;

goog.object.extend(exports, proto.realcity);
